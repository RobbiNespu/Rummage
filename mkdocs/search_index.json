{
    "docs": [
        {
            "location": "/", 
            "text": "Rummage\n\ue157\n\n\nOverview\n\ue157\n\n\nRummage is a cross platform search and replace tool written in Python. Rummage crawls directories and searches for specified patterns (either regular expression or literal) and can optionally replace those targets with desired text.\n\n\nRummage was inspired by the Windows tool \ngrepWin\n. At the time, it was difficult to find a decent GUI search and replace tool macOS and Linux. Rummage was created to fill that void and is available on Linux, macOS, and Windows.\n\n\nRummage is written in Python and is currently available on Python 2.7 and Python 3.4+. Rummage by default uses the Python's Re regular expression engine, but you can also use the fantastic, feature rich \nRegex\n search engine and do interesting things like fuzzy searching and more.\n\n\nWhen specifying a specific file encoding, Rummage is quick enough to search large projects easily. Optionally you can let Rummage detect encoding, but because the encoding detection is done by the pure Python package \nChardet\n, it will run significantly slower. Encoding detection is the biggest bottleneck. This shouldn't be a problem in small projects, but it will become quite noticeable in large projects.", 
            "title": "Rummage"
        }, 
        {
            "location": "/#rummage", 
            "text": "", 
            "title": "Rummage"
        }, 
        {
            "location": "/#overview", 
            "text": "Rummage is a cross platform search and replace tool written in Python. Rummage crawls directories and searches for specified patterns (either regular expression or literal) and can optionally replace those targets with desired text.  Rummage was inspired by the Windows tool  grepWin . At the time, it was difficult to find a decent GUI search and replace tool macOS and Linux. Rummage was created to fill that void and is available on Linux, macOS, and Windows.  Rummage is written in Python and is currently available on Python 2.7 and Python 3.4+. Rummage by default uses the Python's Re regular expression engine, but you can also use the fantastic, feature rich  Regex  search engine and do interesting things like fuzzy searching and more.  When specifying a specific file encoding, Rummage is quick enough to search large projects easily. Optionally you can let Rummage detect encoding, but because the encoding detection is done by the pure Python package  Chardet , it will run significantly slower. Encoding detection is the biggest bottleneck. This shouldn't be a problem in small projects, but it will become quite noticeable in large projects.", 
            "title": "Overview"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\ue157\n\n\nRequirements\n\ue157\n\n\nRummage has a few requirements when installing.  These will all be taken care of when installing via \npip\n.\n\n\n\n\n\n\n\n\nName\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nbackrefs\n 1.0.1+\n\n\nUsed to extend the \nre\n or \nregex\n regular expression engine with additional back references.\n\n\n\n\n\n\ngntp\n\n\nUsed to send notifications to Growl via the the Growl Notification Transport Protocol for all platforms (macOS, Windows, and Linux).\n\n\n\n\n\n\nchardet\n3.0.4+\n\n\nUsed for file encoding guessing when an encoding is not specified.\n\n\n\n\n\n\nwxPython\n4.0.0a3+\n\n\nThe new wxPython 4.0.0 is required for for Rummage to run in Python 2 and Python 3. Classic wxPython support has unfortunately be dropped.\n\n\n\n\n\n\nregex\n2015.07.19+\n\n\nregex\n is usage is completely optional, but it is included for those who wish to use it. Regex is a great regular expression engine that adds some nice features such as fuzzy searching, nested char sets, better Unicode support, and more.\n\n\n\n\n\n\n\n\n\n\nLinux Prerequisites\n\n\nIn traditional Linux fashion, there is a little extra work that needs to be done prior to installing.  Linux requires some prerequisites so that it can build wxPython during installation.\n\n\nExample is for Ubuntu:\n\n\nsudo apt-get install dpkg-dev build-essential python2.7-dev libwebkitgtk-dev libjpeg-dev libtiff-dev libgtk2.0-dev libsdl1.2-dev libgstreamer-plugins-base0.10-dev libnotify-dev freeglut3 freeglut3-dev\n\n\n\n\nReplace \npython2.7-dev\n with the Python version you are using.\n\n\nIf your Linux distribution has \ngstreamer\n 1.0 available, you can install the dev packages for that instead of the 0.10 version.\n\n\nBe patient while installing on Linux as Linux must build wxPython while macOS and Windows do not.\n\n\nCheck out the wxPython document to see if prerequisites have changed: \nhttps://github.com/wxWidgets/Phoenix/blob/master/README.rst#prerequisites\n.\n\n\n\n\nInstallation\n\ue157\n\n\nHere are a couple of ways to install and upgrade. Keep in mind if you are a Linux user, you have some prerequisites to install before proceeding: see \nRequirements\n.\n\n\n\n\n\n\nInstall: \npython pip install rummage\n.\n\n\n\n\n\n\nTo upgrade: \npython install --upgrade rummage\n.\n\n\n\n\n\n\nIf developing on Rummage, you can clone the project, and install the requirements with the following command:\n\n\npip install -r requirements/project.txt\n`\n\n\n\n\n\nYou can then run the command below. This method will allow you to instantly see your changes between iterations without reinstalling which is great for developing.  If you want to do this in a virtual machine, you can as well.  Like the first method, you should then be able to access Rummage from the command line via \nrummage\n or \nrummage --path mydirectory\n.\n\n\npip install --editable .\n\n\n\n\nYou could also just optionally run the package locally, skipping the actual install of Rummage. You can run the project by issuing the following command from the root folder:\n\n\npython -m rummage\n\n\n\n\nIn general, you may find it more appropriate to use the \npythonw\n command instead of \npython\n.  In some environments, it may be required (see \n\"Running in Anaconda (macOS)\"\n).\n\n\n\n\n\n\nRunning in Virtual Environments (macOS)\n\ue157\n\n\nIf installing in a virtual environment via \nvirtualenv\n, you may run into the following error:\n\n\nThis used to be a fairly annoying issue to workaround, but in wxPython 4+, it's not too bad.  The wxPython wiki is a bit out of date.  You don't have to symlink \nwx.pth\n or anything like that anymore as the design of wxPython is a bit different now.  All you have to do is place the script below in \nmy_virtual_env/bin\n.  In this example I call it \nfwpy\n for \"framework python\" (make sure to adjust paths or Python versions to match your installation).\n\n\n#!/bin/bash\n\n# what real Python executable to use\nPYVER=2.7\nPYTHON=/Library/Frameworks/Python.framework/Versions/$PYVER/bin/python$PYVER\n\n# find the root of the virtualenv, it should be the parent of the dir this script is in\nENV=`$PYTHON -c \nimport os; print os.path.abspath(os.path.join(os.path.dirname(\\\n$0\\\n), \n..\n))\n`\necho $ENV\n\n# now run Python with the virtualenv set as Python\ns HOME\nexport PYTHONHOME=$ENV\nexec $PYTHON \n$@\n\n\n\n\n\nRunning in Homebrew (macOS)\n\ue157\n\n\nHomebrew from what I read used to have issues running wxPython in versions less than 4, but this doesn't seem to be an issue with wxPython 4 with Homebrew (at least in my testing).\n\n\nFaceless-MacBook-Pro:~ facelessuser$ brew install python\n...a lot of install stuff\n\nFaceless-MacBook-Pro:~ facelessuser$ /usr/local/Cellar/python/2.7.13_1/bin/pip install rummage\nCollecting rummage\n  Using cached rummage-2.3-py2.py3-none-any.whl\nCollecting regex (from rummage)\nCollecting backrefs\n=1.0.1 (from rummage)\nCollecting gntp\n=1.0.2 (from rummage)\n  Using cached gntp-1.0.3-py2-none-any.whl\nCollecting chardet\n=3.0.4 (from rummage)\n  Using cached chardet-3.0.4-py2.py3-none-any.whl\nCollecting wxpython\n=4.0.0a3 (from rummage)\n  Using cached wxPython-4.0.0a3-cp27-cp27m-macosx_10_6_intel.whl\nCollecting six (from wxpython\n=4.0.0a3-\nrummage)\n  Using cached six-1.10.0-py2.py3-none-any.whl\nInstalling collected packages: regex, backrefs, gntp, chardet, six, wxpython, rummage\nSuccessfully installed backrefs-1.0.1 chardet-3.0.4 gntp-1.0.3 regex-2017.7.11 rummage-2.3 six-1.10.0 wxpython-4.0.0a3\n\nFaceless-MacBook-Pro:~ facelessuser$ /usr/local/Cellar/python/2.7.13_1/bin/python2 -m rummage\n\n\n\n\nRunning in Anaconda (macOS)\n\ue157\n\n\nAnaconda can run Rummage fine from my testing.  The important thing to note is you must launch it with \npythonw -m rummage\n and \nnot\n \npython -m rummage\n.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#requirements", 
            "text": "Rummage has a few requirements when installing.  These will all be taken care of when installing via  pip .     Name  Details      backrefs  1.0.1+  Used to extend the  re  or  regex  regular expression engine with additional back references.    gntp  Used to send notifications to Growl via the the Growl Notification Transport Protocol for all platforms (macOS, Windows, and Linux).    chardet 3.0.4+  Used for file encoding guessing when an encoding is not specified.    wxPython 4.0.0a3+  The new wxPython 4.0.0 is required for for Rummage to run in Python 2 and Python 3. Classic wxPython support has unfortunately be dropped.    regex 2015.07.19+  regex  is usage is completely optional, but it is included for those who wish to use it. Regex is a great regular expression engine that adds some nice features such as fuzzy searching, nested char sets, better Unicode support, and more.      Linux Prerequisites  In traditional Linux fashion, there is a little extra work that needs to be done prior to installing.  Linux requires some prerequisites so that it can build wxPython during installation.  Example is for Ubuntu:  sudo apt-get install dpkg-dev build-essential python2.7-dev libwebkitgtk-dev libjpeg-dev libtiff-dev libgtk2.0-dev libsdl1.2-dev libgstreamer-plugins-base0.10-dev libnotify-dev freeglut3 freeglut3-dev  Replace  python2.7-dev  with the Python version you are using.  If your Linux distribution has  gstreamer  1.0 available, you can install the dev packages for that instead of the 0.10 version.  Be patient while installing on Linux as Linux must build wxPython while macOS and Windows do not.  Check out the wxPython document to see if prerequisites have changed:  https://github.com/wxWidgets/Phoenix/blob/master/README.rst#prerequisites .", 
            "title": "Requirements"
        }, 
        {
            "location": "/installation/#installation_1", 
            "text": "Here are a couple of ways to install and upgrade. Keep in mind if you are a Linux user, you have some prerequisites to install before proceeding: see  Requirements .    Install:  python pip install rummage .    To upgrade:  python install --upgrade rummage .    If developing on Rummage, you can clone the project, and install the requirements with the following command:  pip install -r requirements/project.txt `   You can then run the command below. This method will allow you to instantly see your changes between iterations without reinstalling which is great for developing.  If you want to do this in a virtual machine, you can as well.  Like the first method, you should then be able to access Rummage from the command line via  rummage  or  rummage --path mydirectory .  pip install --editable .  You could also just optionally run the package locally, skipping the actual install of Rummage. You can run the project by issuing the following command from the root folder:  python -m rummage  In general, you may find it more appropriate to use the  pythonw  command instead of  python .  In some environments, it may be required (see  \"Running in Anaconda (macOS)\" ).", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#running-in-virtual-environments-macos", 
            "text": "If installing in a virtual environment via  virtualenv , you may run into the following error:  This used to be a fairly annoying issue to workaround, but in wxPython 4+, it's not too bad.  The wxPython wiki is a bit out of date.  You don't have to symlink  wx.pth  or anything like that anymore as the design of wxPython is a bit different now.  All you have to do is place the script below in  my_virtual_env/bin .  In this example I call it  fwpy  for \"framework python\" (make sure to adjust paths or Python versions to match your installation).  #!/bin/bash\n\n# what real Python executable to use\nPYVER=2.7\nPYTHON=/Library/Frameworks/Python.framework/Versions/$PYVER/bin/python$PYVER\n\n# find the root of the virtualenv, it should be the parent of the dir this script is in\nENV=`$PYTHON -c  import os; print os.path.abspath(os.path.join(os.path.dirname(\\ $0\\ ),  .. )) `\necho $ENV\n\n# now run Python with the virtualenv set as Python s HOME\nexport PYTHONHOME=$ENV\nexec $PYTHON  $@", 
            "title": "Running in Virtual Environments (macOS)"
        }, 
        {
            "location": "/installation/#running-in-homebrew-macos", 
            "text": "Homebrew from what I read used to have issues running wxPython in versions less than 4, but this doesn't seem to be an issue with wxPython 4 with Homebrew (at least in my testing).  Faceless-MacBook-Pro:~ facelessuser$ brew install python\n...a lot of install stuff\n\nFaceless-MacBook-Pro:~ facelessuser$ /usr/local/Cellar/python/2.7.13_1/bin/pip install rummage\nCollecting rummage\n  Using cached rummage-2.3-py2.py3-none-any.whl\nCollecting regex (from rummage)\nCollecting backrefs =1.0.1 (from rummage)\nCollecting gntp =1.0.2 (from rummage)\n  Using cached gntp-1.0.3-py2-none-any.whl\nCollecting chardet =3.0.4 (from rummage)\n  Using cached chardet-3.0.4-py2.py3-none-any.whl\nCollecting wxpython =4.0.0a3 (from rummage)\n  Using cached wxPython-4.0.0a3-cp27-cp27m-macosx_10_6_intel.whl\nCollecting six (from wxpython =4.0.0a3- rummage)\n  Using cached six-1.10.0-py2.py3-none-any.whl\nInstalling collected packages: regex, backrefs, gntp, chardet, six, wxpython, rummage\nSuccessfully installed backrefs-1.0.1 chardet-3.0.4 gntp-1.0.3 regex-2017.7.11 rummage-2.3 six-1.10.0 wxpython-4.0.0a3\n\nFaceless-MacBook-Pro:~ facelessuser$ /usr/local/Cellar/python/2.7.13_1/bin/python2 -m rummage", 
            "title": "Running in Homebrew (macOS)"
        }, 
        {
            "location": "/installation/#running-in-anaconda-macos", 
            "text": "Anaconda can run Rummage fine from my testing.  The important thing to note is you must launch it with  pythonw -m rummage  and  not   python -m rummage .", 
            "title": "Running in Anaconda (macOS)"
        }, 
        {
            "location": "/usage/", 
            "text": "User Guide\n\ue157\n\n\nOverview\n\ue157\n\n\nRummage is designed to be easy to pick up. Rummage's interface consists of three tabs: Search, Files, and Content.  In general, a user specifies where they want to search, what they want to search for, and optionally what they want to replace it with.  Search features can be tweaked with toggles, and the files that get searched can be narrowed with filters.  Search and replace options are all contained in the \nSearch\n tab.  When a search has been completed, general info about the matches found in files will be displayed in the \nFiles\n tab, and more detailed context information will be displayed in the \nContent\n tab.\n\n\nRummage also comes with a simple regular expression tester to test out patterns. It also provides a feature where patterns can be saved for later and/or frequent use.\n\n\nThe status bar will show search progress, match counts, and other useful information.\n\n\n\n\nWarning: Replace\n\n\nWhen replacing, Rummage will back up the file.  If the copy fails, it should terminate the replace for that file.  You can disable backups if you like, but if you aren't careful with your patterns, you may remove unwanted text that you won't be able to recover unless you are using version control.\n\n\nThis is free software, and I am not responsible for files corrupted or lost.\n\n\nSee \nBackups\n to learn more about backups and how to customize backups.\n\n\n\n\nRunning\n\ue157\n\n\nAfter installation, you should then be able to access Rummage from the command line.  This assumes the Python bin directory is in the path.\n\n\nrummage\n\n\n\n\nOr specify a path:\n\n\nrummage --path mydirectory\n\n\n\n\nYou can also run rummage by calling your specific python version like this:\n\n\npython3 -m rummage --path mydirectory\n\n\n\n\nSearch Tab\n\ue157\n\n\n\n\nThe \nSearch\n tab is broken up into 2 panels, the first of which is the \nSearch \n Replace\n panel. The \nSearch \n Replace\n panel has all the inputs where the search and replace is defined and configured.  It also has access to the regular expression tester and the save/load dialogs for saving/loading patterns for later use.\n\n\nThe second panel, is the \nLimit Search\n panel.  The \nLimit Search\n panel contains toggles and inputs that filter the files to be searched.\n\n\nFiles Tab\n\ue157\n\n\n\n\nThe \nFiles\n tab is where files with matches are shown after a search completes.  The files are arranged in a sortable table.  Each entry will show the file's name, size, number of matches in the file, the file path, detected file encoding, date/time when the file was created, and date/time of when the file was last modified.\n\n\nWhen mousing over an entry, the full path to the file will be shown in the status bar.  If you have the editor option in the preference dialog configured properly, you can double click an entry to open to the first match of that file in your favorite editor. Right clicking the entry will bring up a context menu allowing you to reveal the file in your operating system's file manager (Linux will just open parent folder due to limitations on a cross distro solution).\n\n\nContent Tab\n\ue157\n\n\n\n\nThe \nContent\n tab shows each match in a file individually. The entries will be arranged in a sortable table. Each entry shows the file's name, the line on which the match was found, the number of matches on that line, and the content of the line.  Long lines will be truncated.\n\n\nWhen mousing over an entry, the full path to the file will be shown in the status bar.  If you have the editor option in the preference dialog configured properly, you can double click an entry to open to that specific match of that file in your favorite editor.\n\n\nSearch \n Replace Panel\n\ue157\n\n\n\n\nThe \nSearch \n Replace\n panel contains three text boxes with a dropdown history. The first text box defines \nwhere to search\n, the second defines \nwhat to search for\n, and the last defines \nwhat to replace matches with\n (this is only needed when doing replaces).  You can select previously used patterns and search targets by expanding the dropdown panel for the input.\n\n\nBelow the text boxes are toggles that control the regular expression engine's flags and/or features.  These will vary depending on which regular expression engine you are using as Rummage can be used with Python's default \nRe\n engine or the third party \nRegex\n engine.  Both optionally can use the a special wrapper called Backrefs to add support for a couple special escapes.\n\n\nUnderneath the regular expression flags, are toggles for general Rummage search features.  These will alter search and/or replace behavior.\n\n\nLastly, Rummage provides buttons to launch a regular expression tester dialog or dialogs to save or load frequently used regular expressions.\n\n\nCommon Regular Expression Flags\n\ue157\n\n\nBoth the Re and Regex engine have a couple of shared flags that are exposed in Rummage. These toggles are found directly under the search and replace text boxes.\n\n\n\n\n\n\n\n\nToggle\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSearch\nwith\nregex\n\n\nAlters the behavior of \nSearch for\n and \nReplace with\n.  When this is checked, both text boxes require regular expression patterns opposed to literal string.\n\n\n\n\n\n\nSearch\ncase-sensitive\n\n\nForces the search to be case-sensitive.\n\n\n\n\n\n\nDot\nmatches\nnewline\n\n\n.\n will also match newlines.\n\n\n\n\n\n\nUse\nUnicode\nproperties\n\n\nChanges the behavior of \n\\w\n, \n\\W\n, \n\\b\n, \n\\B\n, \n\\d\n, \n\\D\n, \n\\s\n, and \n\\S\n to use use characters from the Unicode property database (will also modify \n\\l\n, \n\\L\n, \n\\c\n, and \n\\C\n in search patterns if using Backrefs with Re).\n\n\n\n\n\n\n\n\nRegex Engine Flags\n\ue157\n\n\nIf the Regex engine is being used for regular expressions, a couple of extra toggles will be available. Regex can be run in either \nVERSION0\n or \nVERSION1\n mode.  \nVERSION0\n is compatible with Re regular expression patterns and has the extra \nfullcase\n toggle.  \nVERSION1\n does not have this toggle as it is enabled by default and can only be disabled inline via a pattern with \n(?-f)\n. \nVERSION1\n is not directly compatible with Re patterns as it adds a number of changes to the syntax allowing for more advanced search options.\n\n\n\n\n\n\n\n\nToggle\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBest\nfuzzy\nmatch\n\n\nIf performing a fuzzy match, the \nbest\n fuzzy match will be used.\n\n\n\n\n\n\nImprove\nfuzzy\nfit\n\n\nMakes fuzzy matching attempt to improve the fit of the next match that it finds.\n\n\n\n\n\n\nUnicode\nword\nbreaks\n\n\nWill use proper Unicode word breaks and line separators when Unicode is enabled. See Regex documentation for more info.\n\n\n\n\n\n\nUse\nPOSIX\nmatching\n\n\nUse the POSIX standard for regular expression, which is to return the leftmost longest match.\n\n\n\n\n\n\nSearch\nbackwards\n\n\nSearch backwards. The result of a reverse search is not necessarily the reverse of a forward search.\n\n\n\n\n\n\nFormat\nstyle\nreplacements\n\n\nReplace pattern will use \nPython's string replace format\n for replace. \n{1[-1]} {1[-2]} {1[-3]}\n etc.\n\n\n\n\n\n\nFull\ncase-folding\n\n\nUse full case folding. For Regex \nV0\n only as it is enabled by default for \nV1\n.\n\n\n\n\n\n\n\n\nRummage Flags\n\ue157\n\n\nRummage has a couple of flags that are not specific to the regular expression engine.\n\n\n\n\n\n\n\n\nToggle\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nBoolean\nmatch\n\n\nWill check each file up until the first match and will halt searching further.  No line context info will be gathered or displayed. Does not apply when performing replaces.\n\n\n\n\n\n\nCount\nonly\n\n\nWill just count the number of matches in the file and will not display line context information. This has no effect when applying replaces.\n\n\n\n\n\n\nCreate\nbackups\n\n\nOn replace, files with matches will be backed up before applying the replacements; backup files will have the \n.rum-bak\n extension.\n\n\n\n\n\n\nForce\nencoding\n\n\nForces all files to be opened with the specified encoding opposed to trying to detect the encoding.  Encoding is hard and slow, so this is the preferred method for fast searches.  On failure, binary will be used instead.\n\n\n\n\n\n\nUse\nchain\nsearch\n\n\nPuts Rummage into \n\"search chain\" mode\n. When in \"search chain\" mode, rummage will only use saved search chains for search and replace.\n\n\n\n\n\n\nUse\nreplace\nplugin\n\n\nWhen enabled, Rummage will use a \nreplace plugin\n instead of a replace pattern in order to do more advanced replaces.\n\n\n\n\n\n\n\n\nRegular Expression Tester\n\ue157\n\n\n\n\nRummage comes with a simple regular expression tester (but you can also test literal patterns if desired). It has a simple multi-line text box to place content to search, and another multi-line box that will show the final results after the find and replace are applied.  Below that you will find two text input boxes for the find pattern and the replace pattern.  Lastly, all search and replace flag toggles are found under the patterns.\n\n\nTo use the tester, simply enter the content to search, set your desired toggles, and input your find and replace pattern.  As you change your pattern or change your toggles, matches will be updated and highlighted, and the result box will be updated.\n\n\nWhen you are satisfied with your result, click the \nUse\n button, and your pattern and settings will be populated in the main window.\n\n\nSaving and Loading Regular Expressions\n\ue157\n\n\nRegular expressions can be very complex, and sometimes you might want to save them for future use to save yourself from having to reconstruct them.\n\n\nWhen you have a pattern configured that you want to save, simply click the \nSave Search\n button, and a dialog will pop up asking you to name the search.  When done, click the \nSave\n button on the dialog and your search patterns and toggles will be saved.\n\n\nYou'll notice that there are two input boxes. The first requires a unique name (only word characters, underscores, and hyphens are allowed). The second is an optional comment in case you wish to elaborate on what the pattern is for.\n\n\nUnderneath the inputs will be the actual search settings being saved.  All of the search settings will be in read only controls.\n\n\n\n\nTo load a pattern that was saved previously, click the \nLoad Search\n button.  You will be presented with a dialog showing all your saved searches.  Highlight the pattern you want to load and click the \nLoad\n button.  Your pattern and toggles will be populated in the main dialog.\n\n\nIf you wish to edit the name or comment of a search, you can double click the entry or click the \"Edit\" button.\n\n\n\n\nSearch Chains\n\ue157\n\n\nThere are times you may have a task that requires you to do multiple find and replaces that are all related, but are too difficult to represent as a single find and replace. This is where search chains can be helpful.\n\n\nSearch chains are essentially a sequence of multiple \nsaved search and replace patterns\n. You can create a search chain by clicking the \nSearch Chains\n button which will bring up the search change manager.\n\n\n\n\nHere you can create or delete search chains.\n\n\n\n\nTo use search chains you must put Rummage in \"search chain\" mode by selecting the check box named \nUse search chains\n in the main window. When \"search chain\" mode is enabled, all controls that don't apply to search chains will be disabled, and the search box will be replaced with a drop down for selecting created chains. When a search is performed, Rummage will iterate over each file with all the saved searches in the chain.\n\n\n\n\nReplace plugins\n\ue157\n\n\nRegular expressions are great, but some times regular expressions aren't enough.  If you are dealing with a replace task that requires logic that cannot be represented in a simple replace pattern, you can create a \"replace plugin\".\n\n\nSimply create a Python script with a Replace class derived from the \nReplacePlugin\n class found in \nrumcore\n at: \nfrom\n \nrummage.lib\n \nimport\n \nrumcore\n.  The plugin file must include a function called \nget_replace\n that returns the needed class.\n\n\nclass\n \nReplacePlugin\n(\nobject\n):\n\n    \nRummage replace plugin.\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nfile_info\n,\n \nflags\n):\n\n        \nInitialize.\n\n\n        \nself\n.\nfile_info\n \n=\n \nfile_info\n\n        \nself\n.\nflags\n \n=\n \nflags\n\n        \nself\n.\non_init\n()\n\n\n    \ndef\n \non_init\n(\nself\n):\n\n        \nOverride this function to add initialization setup.\n\n\n    \ndef\n \nget_flags\n(\nself\n):\n\n        \nGet flags.\n\n\n        \nreturn\n \nself\n.\nflags\n\n\n    \ndef\n \nget_file_name\n(\nself\n):\n\n        \nGet file name.\n\n\n        \nreturn\n \nself\n.\nfile_info\n.\nname\n\n\n    \ndef\n \nis_binary\n(\nself\n):\n\n        \nIs a binary search.\n\n\n        \nreturn\n \nself\n.\nfile_info\n.\nencoding\n.\nencode\n \n==\n \nbin\n\n\n    \ndef\n \nis_literal\n(\nself\n):\n\n        \nIs a literal search.\n\n\n        \nreturn\n \nself\n.\nflags\n \n \nLITERAL\n\n\n    \ndef\n \nreplace\n(\nself\n,\n \nm\n):\n\n        \nMake replacement.\n\n\n        \nreturn\n \nm\n.\ngroup\n(\n0\n)\n\n\n\n\n\nThe \nfile_info\n property is a named tuple providing information about the current file such as name, size, creation date, etc.\n\n\nclass\n \nFileInfoRecord\n(\nnamedtuple\n(\nFileInfoRecord\n,\n \n[\nid\n,\n \nname\n,\n \nsize\n,\n \nmodified\n,\n \ncreated\n,\n \nencoding\n])):\n\n    \nA record for tracking file info.\n\n\n\n\n\nThe \nflags\n property seen above contains only Rummage search related flags (the flags are abstracted at this level and are converted to the appropriate regular expression flags later).\n\n\n# Common regular expression flags (re|regex)\n\n\nIGNORECASE\n \n=\n \n0x1\n  \n# (?i)\n\n\nDOTALL\n \n=\n \n0x2\n      \n# (?s)\n\n\nMULTILINE\n \n=\n \n0x4\n   \n# (?m)\n\n\nUNICODE\n \n=\n \n0x8\n     \n# (?u)\n\n\n\n# Regex module flags\n\n\nASCII\n \n=\n \n0x10\n            \n# (?a)\n\n\nFULLCASE\n \n=\n \n0x20\n         \n# (?f)\n\n\nWORD\n \n=\n \n0x40\n             \n# (?w)\n\n\nBESTMATCH\n \n=\n \n0x80\n        \n# (?b)\n\n\nENHANCEMATCH\n \n=\n \n0x100\n    \n# (?e)\n\n\nREVERSE\n \n=\n \n0x200\n         \n# (?r)\n\n\nVERSION0\n \n=\n \n0x400\n        \n# (?V0)\n\n\nVERSION1\n \n=\n \n0x800\n        \n# (?V1)\n\n\nFORMATREPLACE\n \n=\n \n0x1000\n  \n# Use {1} for groups in replace\n\n\nPOSIX\n \n=\n \n0x2000\n          \n# (?p)\n\n\n\n# Rumcore search related flags\n\n\nLITERAL\n \n=\n \n0x10000\n           \n# Literal search\n\n\n\n\n\nTo use replace plugins, simply check the \nUse plugin replace\n check box in the main dialog.\n\n\n\n\nThe main dialog's \nReplace with\n text box will become the \nReplace plugin\n text box with an associated file picker.  Here you can point to your replace plugin file.\n\n\n\n\nExample Plugin\nIn the example below, we have a replace plugin that replaces the search result with the name of the file.  It is assumed this is not a binary replace.\nfrom\n \n__future__\n \nimport\n \nunicode_literals\n\n\nfrom\n \nrummage.lib\n \nimport\n \nrumcore\n\n\nimport\n \nos\n\n\n\n\nclass\n \nTestReplace\n(\nrumcore\n.\nReplacePlugin\n):\n\n    \nReplace object.\n\n\n    \ndef\n \nreplace\n(\nself\n,\n \nm\n):\n\n        \nReplace method.\n\n\n        \nname\n \n=\n \nos\n.\npath\n.\nbasename\n(\nself\n.\nget_file_name\n())\n\n        \nreturn\n \nname\n\n\n\n\ndef\n \nget_replace\n():\n\n    \nGet the replace object.\n\n\n    \nreturn\n \nTestReplace\n\n\n\n\nLimit Search Panel\n\ue157\n\n\n\n\nThe limit search pattern contains inputs and toggles to filter which files will be searched.  Some people may like to set up the filters and hide the panel.  If this is desired, you can select in the window's menu \nView\nHide Limit Search Panel\n, and the panel will be hidden.\n\n\n\n\n\n\n\n\nLimiter\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSize\nof\n\n\nLimits files that are searched by size in Kilobytes.  Files are limited by whether they are greater than, less than, or equal to the specified size.  Setting the dropdown to \nany\n disables the filter and allows any file size to be searched. It is recommended to cap search sizes in projects with very large files for the best performances.  The more complex the search pattern, the longer it will take to search a really large file.\n\n\n\n\n\n\nModified\n\n\nLimits the files to be searched by the modified timestamp.  It contains a date picker and time picker that are used to specify the target date and time. Files are limited by whether their timestamp comes before, after, or on specified date time.  Setting the dropdown to \non any\n will disable the filter and allow a file with any timestamp to be searched.\n\n\n\n\n\n\nCreated\n\n\nLimits the files to be searched by the creation timestamp.  It contains a date picker and time picker that are used to specify the target date and time. Files are limited by whether their timestamp comes before, after, or on specified date time.  Setting the dropdown to \non any\n will disable the filter and allow a file with any timestamp to be searched.\n\n\n\n\n\n\nFiles\nwhich\nmatch\n\n\nSpecifies a file pattern for files that should be searched.  Multiple file patterns can be specified with \n;\n used as a separator. If the Regex toggle to the text box's right is selected, the file pattern must be a regular expression pattern.  You can select previously used patterns by expanding the dropdown panel for the input.\n\n\n\n\n\n\nExclude\nfolders\n\n\nSpecifies a directory exclude pattern to filter out folders that are not to be crawled.  Multiple file patterns can be specified with \n;\n used as a separator.  If the Regex toggle to the text box's right is selected, the file pattern must be a regular expression pattern.  You can select previously used patterns by expanding the dropdown panel for the input.\n\n\n\n\n\n\nInclude\nsubfolders\n\n\nIndicates that folders should be recursively searched.\n\n\n\n\n\n\nInclude\nhidden\n\n\nThe given OS's native hidden files, folders and dotfiles will be included in the search.\n\n\n\n\n\n\nInclude\nbinary\nfiles\n\n\nForces Rummage to search binary files.\n\n\n\n\n\n\n\n\n\n\nTip\n\n\nIf you don't specify a search pattern, Rummage will use your file filter and just show files that match your file filter pattern.\n\n\n\n\nExport to CSV or HTML\n\ue157\n\n\n\n\nRummage allows the exporting of the results to either CSV or HTML.  Simply select \nFile\nExport\n and pick either \nCSV\n or \nHTML\n.  The HTML output will be styled similar to the GUI interface with the results in tables with sortable columns.\n\n\n!!! note \"Note\":\n    Really, really large sets of results will probably be best suited for CSV as a browser may have a hard time loading the entire data set at once.\n\n\nPreferences\n\ue157\n\n\nThe preference dialog (found at \nFile\nPreferences\n) is where general application settings are available. The preference dialog organizes settings by tabs.\n\n\nGeneral\n\ue157\n\n\n\n\nThe \nGeneral\n tab contains a couple of useful settings.\n\n\n\n\nSingle Instance\n\n\nBy default, Rummage will allow for multiple windows to be open.  If this option is enabled, the first window will be be the only window to open.  All subsequent instances will pass their arguments to the first and close without showing a window.\n\n\nLanguage\n\n\nRummage has internal support to display dialog labels in different languages. Currently Rummage has English. Russian is outdated but includes most of the needed translations. In order to use locale, you must copy the project's localization files to your user settings directory. See \nLocalization\n to learn more.\n\n\n\n\nRegex\n\ue157\n\n\n\n\nThe \nRegular Expression Modules\n tab is where the desired regular expression engine that Rummage uses can be selected and configured.  By default, Rummage will use Re, but if Regex module is installed in your Python installation, it can be selected instead.  There is also the options of using Re or Regex with \nBackrefs\n (a wrapper that adds a couple of special escapes).\n\n\nIf using Regex, you can set it to version of your choice. \nV0\n tries to be completely compatible with Re patterns while \nV1\n breaks compatibility with Re and adds even more useful features. Please see \nRegex documentation\n to learn more.\n\n\nEditor\n\ue157\n\n\n\n\nThe \nEditor\n tab is where an editor can be configured that will be used to show files for editing.  To setup, click the \nChange\n button.  You will be presented with a dialog. Simply provide the appropriate command to open files and click \nApply\n.\n\n\n\n\nThe editor options dialog has a file picker to select the the editor.  In macOS it may be beneficial to create a shell script or symlink that you can references as the picker won't be able to descend into an \n.app\n bundle as it is viewed as a file instead of a folder.\n\n\nYou can then add arguments.  Each argument must be added as a separate entry.  So something like \n--file myfile.txt\n would be counted as \ntwo\n arguments while \n--file=myfile\n would be counted as one.\n\n\nAs noted in the image above, Rummage provides 3 special variables that can be used to insert the file name, line number, or column number.\n\n\n\n\n\n\n\n\nArgument Variables\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n{$file}\n\n\nInsert the file name.\n\n\n\n\n\n\n{$line}\n\n\nInsert the line number.\n\n\n\n\n\n\n{$col}\n\n\nInsert the column number.\n\n\n\n\n\n\n\n\nNotifications\n\ue157\n\n\n\n\nThe \nNotification\n tab controls enabling/disabling and configuration of notifications.  You can enable/disable visual notifications and/or audible notification sounds.\n\n\nYou can also select whether to use the system's built-in notifications or Growl.\n\n\n\n\nUbuntu\n\n\n\n\n\n\nGrowl: \nSupport for Linux\n.\n\n\nNative: OSD via \nnotify-send\n.\n\n\n\n\n\n\nNote\n\n\nThough Rummage should run on any Linux distro, the native dialog option was built around Ubuntu's native notifications called OSD.  Notifications will not work on other distros that do not use OSD \nunless\n they use Growl.  Even without Growl, other distros will probably still get the audible cue, but as each distro varies, it is difficult to be certain.  As notifications are not crucial to usage, this is minor concern.\n\n\n\n\n\n\nmacOS\n\n\n\n\n\n\nGrowl: \nSupport for macOS\n.\n\n\nNative: Notification Center via \nterminal-notifier\n. Path to \nterminal-notifier\n must be configured.\n\n\n\n\n\n\nNote\n\n\nWhen selecting \nnative\n on macOS, an option to select the path to terminal notifier will be available since native dialogs rely on \nterminal-notifier\n to send notifications to the Notification Center. This must be configured or \nnative\n notifications will not work.\n\n\nWhen selecting the \nterminal-notifier\n path, you can select either the binary directly or the \n.\napp\n bundle (depending on how you installed \nterminal-notifier\n).  When selecting the \n.app\n bundle, Rummage will know how to access the binary inside the bundle.\n\n\n\n\n\n\nWindows\n\n\n\n\n\n\nGrowl: [Support for Windows][growl-win].\n\n\nNative: Native windows taskbar notifications.\n\n\n\n\n\n\n\n\nHistory\n\ue157\n\n\n\n\nThe \nHistory\n panel is where all text box drop down history can be cleared.\n\n\nBackrefs (Extended Regex Escapes)\n\ue157\n\n\nRummage has the option of using a special wrapper called Backrefs around Python's Re or the 3\nrd\n party Regex module. Backrefs was written specifically for use with Rummage and adds various additional back references that are known to some regex engines, but not to Python's Re or Regex modules.  The supported back references actually vary depending on the engine being used as one may already have similar support.  You can enable extended back references in the \nPreferences\n dialog under the \nRegular Expressions Module\n panel.\n\n\nTo learn more about the added back references when using Backrefs, read the official \nBackrefs documentation\n.\n\n\nBackups\n\ue157\n\n\nRummage by default does a backup of files on replace when \nCreate backups\n is enabled in the main dialog. Backups are saved in the same location as the target file with the unique extension \nrum-bak\n appended to them.  When \nCreate backups\n is enabled, files with the extension \nrum-bak\n are ignored in search and replace in order to avoid replacing content in your backup.\n\n\nIf desired, Rummage can be configured to store backups in a sub-folder at the target file's location by setting the \nBackup to folder\n option in the setting dialog. The backup folder will be named \n.rum-bak\n.  When this is done, all files in \n.rum-bak\n will have the \nbak\n extension. The entire folder \n.rum-bak\n is excluded from search and replace when \nCreate backups\n is enabled.\n\n\nIf you would like, you can control the backup extension in the settings dialog and/or the backup folder name.  Remember though, when saving backups to a sub-folder, the custom extension will not be applied and \nbak\n will be used as the whole folder is ignored eliminating the need for a unique extension.\n\n\nFile Manager Context Menu\n\ue157\n\n\nmacOS\n\ue157\n\n\n\n\nOpen Automator.\n\n\nCreate new Service.\n\n\n\n\nSet the following:\n\n\n\n\nService receives selected \nfiles or folders\n in \nany Application\n.\n\n\nShell: \n/bin/sh\n.\n\n\nPass input: \nas arguments\n.\n\n\n\n\nContent of script:\n\n\n(/Library/Frameworks/Python.framework/Versions/2.7/bin/rummage --path \n$1\n)\n/dev/null 2\n1 \n\n\n\n\n\nThis is just an example. You will need to determine the location of your Python install.\n\n\n\n\n\n\n\n\n\n\nSave to \n/Users/\nusername\n/Library/Services/Rummage Here...\n.\n\n\n\n\n\n\nWindows\n\ue157\n\n\n\n\n\n\nCreate a file \nrummage.reg\n and put the following in it (replace \nrummage_path\n path with the actual path to   \nrummage.exe\n that is created in your Python Script folder on installation).  Remember to escape backslashes appropriately.  This isn't a guide in how to do registry editing proper, so only edit the registry if you are certain of what you are doing.\n\n\nWindows Registry Editor Version 5.00\n\n\n\n[HKEY_CLASSES_ROOT\\Folder\\shell\\Rummage Here...]\n\n\n@\n=\n\n\n\n[HKEY_CLASSES_ROOT\\Folder\\shell\\Rummage Here...\\command]\n\n\n@\n=\n\\\nrummage_path\n\\\n \\\n--path\\\n \\\n%1\\\n\n\n\n[HKEY_CLASSES_ROOT\\*\\shell\\Rummage Here...]\n\n\n@\n=\n\n\n\n[HKEY_CLASSES_ROOT\\*\\shell\\Rummage Here...\\command]\n\n\n@\n=\n\\\nrummage_path\n\\\n \\\n--path\\\n \\\n%1\\\n\n\n\n\n\n\n\n\n\nSave file.\n\n\n\n\nDouble click the registry file to add the context menu into Windows Explorer.\n\n\n\n\nLinux\n\ue157\n\n\nThere are many different flavors of Linux using different file managers.  This makes it difficult to give a guide to cover all cases.  Please research about your specific distro's file manager and how to add context menus.  If you would like to include the info here, please issue a pull request to update the documentation.\n\n\nUbuntu Nautilus\n\ue157\n\n\nPaths might vary depending on Ubuntu version etc.\n\n\n\n\n\n\nCreate an executable file called \nRummage Here...\n in \n~/.local/share/nautilus/scripts/\n with the following content (RUMMAGE_PATH should be the binary created when installing rummage in Python which is usually \n/usr/local/bin/rummage\n).\n\n\n#!/usr/bin/python\n\n\nimport\n \nos\n\n\nimport\n \nsubprocess\n\n\n\nRUMMAGE_PATH\n \n=\n \n/usr/local/bin/rummage\n\n\n\nselected_paths\n \n=\n \nos\n.\nenviron\n.\nget\n(\nNAUTILUS_SCRIPT_SELECTED_FILE_PATHS\n,\n \nNone\n)\n\n\nif\n \nselected_paths\n \nis\n \nnot\n \nNone\n:\n\n    \npaths\n \n=\n \nselected_paths\n.\nsplit\n(\n\\n\n)\n\n    \nif\n \nlen\n(\npaths\n):\n\n        \nsubprocess\n.\nPopen\n([\nRUMMAGE_PATH\n,\n \n--path\n,\n \npaths\n[\n0\n]])\n\n\n\n\n\n\n\n\n\nRestart of Nautilus may or may not be needed, but context menu item should appear under \nScripts\n and should work on files and folders.\n\n\n\n\n\n\nLocalization\n\ue157\n\n\nRummage provides an i18n localization framework to allow support for displaying the UI in other languages. But there is some manual setup required as out of the box, everything is in English. Currently the project only has an incomplete Russian translation (I don't speak Russian, so I can't complete it).\n\n\nSo to get localization, you must first build the \n.mo\n files on your system, copy them to your Rummage setting folder, select your desired language in the preference dialog, and restart Rummage.\n\n\nBuild Translations\n\ue157\n\n\nDownload the release source and unzip it.\n\n\nCompile \n.mo\n files by running the \ntools/localize_me.py\n script from the root of the project:\n\n\npython3 tools/localize_me.py --i18n /Library/Frameworks/Python.framework/Versions/3.6/share/doc/python3.6/examples/Tools/i18n\n\n\n\n\nModify the \n--i18n\n path to the appropriate location of the \ni18n\n folder for your Python.\n\n\nInstalling Translations\n\ue157\n\n\nTo install translations, just copy the \nlocale\n folder (with your compiled \n.mo\n files) from the release you are using to your user configuration folder.  For a traditional Python installation, this is where you'd find it for each OS:\n\n\nWindows: \nC:\\Users\\\nmy_username\n\\.Rummage\n\nmacOS: \n/Users/\nmy_username\n/.Rummage\n\nLinux: \n/home/\nmy_username\n/.config/Rummage\n\n\nUnless the UI changes by adding new untranslated strings, you can keep using the same translations.\n\n\nAfter installing the localization files, set the language via the \nLanguage\n setting in the settings \nGeneral panel\n.\n\n\nAdding New Translations\n\ue157\n\n\n\n\nClone the project and create a new folder under \nlocale\n with the appropriate locale name.\n\n\nCreate another folder under the one you just created called \nLC_MESSAGES\n.\n\n\nCopy \nlocale/messages.po\n to \nlocale/\nmy_LOCALE\n/LC_MESSAGES/rummage.po\n.\n\n\n\n\nEdit the copied file changing things like:\n\n\nmsgid \nAbout\n\nmsgstr \n\n\n\n\n\nTo:\n\n\nmsgid \nAbout\n\nmsgstr \nmy_translation\n\n\n\n\n\n\n\n\n\nCompile by following steps in \nBuild Translations\n.\n\n\n\n\n\n\nCommit, push, and pull request.\n\n\n\n\n\n\nI only speak English, so I do not maintain the translations. If the UI changes, someone from the community will need to update them appropriately via pull requests or they will remain out of date.", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#user-guide", 
            "text": "", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#overview", 
            "text": "Rummage is designed to be easy to pick up. Rummage's interface consists of three tabs: Search, Files, and Content.  In general, a user specifies where they want to search, what they want to search for, and optionally what they want to replace it with.  Search features can be tweaked with toggles, and the files that get searched can be narrowed with filters.  Search and replace options are all contained in the  Search  tab.  When a search has been completed, general info about the matches found in files will be displayed in the  Files  tab, and more detailed context information will be displayed in the  Content  tab.  Rummage also comes with a simple regular expression tester to test out patterns. It also provides a feature where patterns can be saved for later and/or frequent use.  The status bar will show search progress, match counts, and other useful information.   Warning: Replace  When replacing, Rummage will back up the file.  If the copy fails, it should terminate the replace for that file.  You can disable backups if you like, but if you aren't careful with your patterns, you may remove unwanted text that you won't be able to recover unless you are using version control.  This is free software, and I am not responsible for files corrupted or lost.  See  Backups  to learn more about backups and how to customize backups.", 
            "title": "Overview"
        }, 
        {
            "location": "/usage/#running", 
            "text": "After installation, you should then be able to access Rummage from the command line.  This assumes the Python bin directory is in the path.  rummage  Or specify a path:  rummage --path mydirectory  You can also run rummage by calling your specific python version like this:  python3 -m rummage --path mydirectory", 
            "title": "Running"
        }, 
        {
            "location": "/usage/#search-tab", 
            "text": "The  Search  tab is broken up into 2 panels, the first of which is the  Search   Replace  panel. The  Search   Replace  panel has all the inputs where the search and replace is defined and configured.  It also has access to the regular expression tester and the save/load dialogs for saving/loading patterns for later use.  The second panel, is the  Limit Search  panel.  The  Limit Search  panel contains toggles and inputs that filter the files to be searched.", 
            "title": "Search Tab"
        }, 
        {
            "location": "/usage/#files-tab", 
            "text": "The  Files  tab is where files with matches are shown after a search completes.  The files are arranged in a sortable table.  Each entry will show the file's name, size, number of matches in the file, the file path, detected file encoding, date/time when the file was created, and date/time of when the file was last modified.  When mousing over an entry, the full path to the file will be shown in the status bar.  If you have the editor option in the preference dialog configured properly, you can double click an entry to open to the first match of that file in your favorite editor. Right clicking the entry will bring up a context menu allowing you to reveal the file in your operating system's file manager (Linux will just open parent folder due to limitations on a cross distro solution).", 
            "title": "Files Tab"
        }, 
        {
            "location": "/usage/#content-tab", 
            "text": "The  Content  tab shows each match in a file individually. The entries will be arranged in a sortable table. Each entry shows the file's name, the line on which the match was found, the number of matches on that line, and the content of the line.  Long lines will be truncated.  When mousing over an entry, the full path to the file will be shown in the status bar.  If you have the editor option in the preference dialog configured properly, you can double click an entry to open to that specific match of that file in your favorite editor.", 
            "title": "Content Tab"
        }, 
        {
            "location": "/usage/#search--replace-panel", 
            "text": "The  Search   Replace  panel contains three text boxes with a dropdown history. The first text box defines  where to search , the second defines  what to search for , and the last defines  what to replace matches with  (this is only needed when doing replaces).  You can select previously used patterns and search targets by expanding the dropdown panel for the input.  Below the text boxes are toggles that control the regular expression engine's flags and/or features.  These will vary depending on which regular expression engine you are using as Rummage can be used with Python's default  Re  engine or the third party  Regex  engine.  Both optionally can use the a special wrapper called Backrefs to add support for a couple special escapes.  Underneath the regular expression flags, are toggles for general Rummage search features.  These will alter search and/or replace behavior.  Lastly, Rummage provides buttons to launch a regular expression tester dialog or dialogs to save or load frequently used regular expressions.", 
            "title": "Search &amp; Replace Panel"
        }, 
        {
            "location": "/usage/#common-regular-expression-flags", 
            "text": "Both the Re and Regex engine have a couple of shared flags that are exposed in Rummage. These toggles are found directly under the search and replace text boxes.     Toggle  Description      Search with regex  Alters the behavior of  Search for  and  Replace with .  When this is checked, both text boxes require regular expression patterns opposed to literal string.    Search case-sensitive  Forces the search to be case-sensitive.    Dot matches newline  .  will also match newlines.    Use Unicode properties  Changes the behavior of  \\w ,  \\W ,  \\b ,  \\B ,  \\d ,  \\D ,  \\s , and  \\S  to use use characters from the Unicode property database (will also modify  \\l ,  \\L ,  \\c , and  \\C  in search patterns if using Backrefs with Re).", 
            "title": "Common Regular Expression Flags"
        }, 
        {
            "location": "/usage/#regex-engine-flags", 
            "text": "If the Regex engine is being used for regular expressions, a couple of extra toggles will be available. Regex can be run in either  VERSION0  or  VERSION1  mode.   VERSION0  is compatible with Re regular expression patterns and has the extra  fullcase  toggle.   VERSION1  does not have this toggle as it is enabled by default and can only be disabled inline via a pattern with  (?-f) .  VERSION1  is not directly compatible with Re patterns as it adds a number of changes to the syntax allowing for more advanced search options.     Toggle  Description      Best fuzzy match  If performing a fuzzy match, the  best  fuzzy match will be used.    Improve fuzzy fit  Makes fuzzy matching attempt to improve the fit of the next match that it finds.    Unicode word breaks  Will use proper Unicode word breaks and line separators when Unicode is enabled. See Regex documentation for more info.    Use POSIX matching  Use the POSIX standard for regular expression, which is to return the leftmost longest match.    Search backwards  Search backwards. The result of a reverse search is not necessarily the reverse of a forward search.    Format style replacements  Replace pattern will use  Python's string replace format  for replace.  {1[-1]} {1[-2]} {1[-3]}  etc.    Full case-folding  Use full case folding. For Regex  V0  only as it is enabled by default for  V1 .", 
            "title": "Regex Engine Flags"
        }, 
        {
            "location": "/usage/#rummage-flags", 
            "text": "Rummage has a couple of flags that are not specific to the regular expression engine.     Toggle  Description      Boolean match  Will check each file up until the first match and will halt searching further.  No line context info will be gathered or displayed. Does not apply when performing replaces.    Count only  Will just count the number of matches in the file and will not display line context information. This has no effect when applying replaces.    Create backups  On replace, files with matches will be backed up before applying the replacements; backup files will have the  .rum-bak  extension.    Force encoding  Forces all files to be opened with the specified encoding opposed to trying to detect the encoding.  Encoding is hard and slow, so this is the preferred method for fast searches.  On failure, binary will be used instead.    Use chain search  Puts Rummage into  \"search chain\" mode . When in \"search chain\" mode, rummage will only use saved search chains for search and replace.    Use replace plugin  When enabled, Rummage will use a  replace plugin  instead of a replace pattern in order to do more advanced replaces.", 
            "title": "Rummage Flags"
        }, 
        {
            "location": "/usage/#regular-expression-tester", 
            "text": "Rummage comes with a simple regular expression tester (but you can also test literal patterns if desired). It has a simple multi-line text box to place content to search, and another multi-line box that will show the final results after the find and replace are applied.  Below that you will find two text input boxes for the find pattern and the replace pattern.  Lastly, all search and replace flag toggles are found under the patterns.  To use the tester, simply enter the content to search, set your desired toggles, and input your find and replace pattern.  As you change your pattern or change your toggles, matches will be updated and highlighted, and the result box will be updated.  When you are satisfied with your result, click the  Use  button, and your pattern and settings will be populated in the main window.", 
            "title": "Regular Expression Tester"
        }, 
        {
            "location": "/usage/#saving-and-loading-regular-expressions", 
            "text": "Regular expressions can be very complex, and sometimes you might want to save them for future use to save yourself from having to reconstruct them.  When you have a pattern configured that you want to save, simply click the  Save Search  button, and a dialog will pop up asking you to name the search.  When done, click the  Save  button on the dialog and your search patterns and toggles will be saved.  You'll notice that there are two input boxes. The first requires a unique name (only word characters, underscores, and hyphens are allowed). The second is an optional comment in case you wish to elaborate on what the pattern is for.  Underneath the inputs will be the actual search settings being saved.  All of the search settings will be in read only controls.   To load a pattern that was saved previously, click the  Load Search  button.  You will be presented with a dialog showing all your saved searches.  Highlight the pattern you want to load and click the  Load  button.  Your pattern and toggles will be populated in the main dialog.  If you wish to edit the name or comment of a search, you can double click the entry or click the \"Edit\" button.", 
            "title": "Saving and Loading Regular Expressions"
        }, 
        {
            "location": "/usage/#search-chains", 
            "text": "There are times you may have a task that requires you to do multiple find and replaces that are all related, but are too difficult to represent as a single find and replace. This is where search chains can be helpful.  Search chains are essentially a sequence of multiple  saved search and replace patterns . You can create a search chain by clicking the  Search Chains  button which will bring up the search change manager.   Here you can create or delete search chains.   To use search chains you must put Rummage in \"search chain\" mode by selecting the check box named  Use search chains  in the main window. When \"search chain\" mode is enabled, all controls that don't apply to search chains will be disabled, and the search box will be replaced with a drop down for selecting created chains. When a search is performed, Rummage will iterate over each file with all the saved searches in the chain.", 
            "title": "Search Chains"
        }, 
        {
            "location": "/usage/#replace-plugins", 
            "text": "Regular expressions are great, but some times regular expressions aren't enough.  If you are dealing with a replace task that requires logic that cannot be represented in a simple replace pattern, you can create a \"replace plugin\".  Simply create a Python script with a Replace class derived from the  ReplacePlugin  class found in  rumcore  at:  from   rummage.lib   import   rumcore .  The plugin file must include a function called  get_replace  that returns the needed class.  class   ReplacePlugin ( object ): \n     Rummage replace plugin. \n\n     def   __init__ ( self ,   file_info ,   flags ): \n         Initialize. \n\n         self . file_info   =   file_info \n         self . flags   =   flags \n         self . on_init () \n\n     def   on_init ( self ): \n         Override this function to add initialization setup. \n\n     def   get_flags ( self ): \n         Get flags. \n\n         return   self . flags \n\n     def   get_file_name ( self ): \n         Get file name. \n\n         return   self . file_info . name \n\n     def   is_binary ( self ): \n         Is a binary search. \n\n         return   self . file_info . encoding . encode   ==   bin \n\n     def   is_literal ( self ): \n         Is a literal search. \n\n         return   self . flags     LITERAL \n\n     def   replace ( self ,   m ): \n         Make replacement. \n\n         return   m . group ( 0 )   The  file_info  property is a named tuple providing information about the current file such as name, size, creation date, etc.  class   FileInfoRecord ( namedtuple ( FileInfoRecord ,   [ id ,   name ,   size ,   modified ,   created ,   encoding ])): \n     A record for tracking file info.   The  flags  property seen above contains only Rummage search related flags (the flags are abstracted at this level and are converted to the appropriate regular expression flags later).  # Common regular expression flags (re|regex)  IGNORECASE   =   0x1    # (?i)  DOTALL   =   0x2        # (?s)  MULTILINE   =   0x4     # (?m)  UNICODE   =   0x8       # (?u)  # Regex module flags  ASCII   =   0x10              # (?a)  FULLCASE   =   0x20           # (?f)  WORD   =   0x40               # (?w)  BESTMATCH   =   0x80          # (?b)  ENHANCEMATCH   =   0x100      # (?e)  REVERSE   =   0x200           # (?r)  VERSION0   =   0x400          # (?V0)  VERSION1   =   0x800          # (?V1)  FORMATREPLACE   =   0x1000    # Use {1} for groups in replace  POSIX   =   0x2000            # (?p)  # Rumcore search related flags  LITERAL   =   0x10000             # Literal search   To use replace plugins, simply check the  Use plugin replace  check box in the main dialog.   The main dialog's  Replace with  text box will become the  Replace plugin  text box with an associated file picker.  Here you can point to your replace plugin file.   Example Plugin In the example below, we have a replace plugin that replaces the search result with the name of the file.  It is assumed this is not a binary replace. from   __future__   import   unicode_literals  from   rummage.lib   import   rumcore  import   os  class   TestReplace ( rumcore . ReplacePlugin ): \n     Replace object. \n\n     def   replace ( self ,   m ): \n         Replace method. \n\n         name   =   os . path . basename ( self . get_file_name ()) \n         return   name  def   get_replace (): \n     Get the replace object. \n\n     return   TestReplace", 
            "title": "Replace plugins"
        }, 
        {
            "location": "/usage/#limit-search-panel", 
            "text": "The limit search pattern contains inputs and toggles to filter which files will be searched.  Some people may like to set up the filters and hide the panel.  If this is desired, you can select in the window's menu  View Hide Limit Search Panel , and the panel will be hidden.     Limiter  Description      Size of  Limits files that are searched by size in Kilobytes.  Files are limited by whether they are greater than, less than, or equal to the specified size.  Setting the dropdown to  any  disables the filter and allows any file size to be searched. It is recommended to cap search sizes in projects with very large files for the best performances.  The more complex the search pattern, the longer it will take to search a really large file.    Modified  Limits the files to be searched by the modified timestamp.  It contains a date picker and time picker that are used to specify the target date and time. Files are limited by whether their timestamp comes before, after, or on specified date time.  Setting the dropdown to  on any  will disable the filter and allow a file with any timestamp to be searched.    Created  Limits the files to be searched by the creation timestamp.  It contains a date picker and time picker that are used to specify the target date and time. Files are limited by whether their timestamp comes before, after, or on specified date time.  Setting the dropdown to  on any  will disable the filter and allow a file with any timestamp to be searched.    Files which match  Specifies a file pattern for files that should be searched.  Multiple file patterns can be specified with  ;  used as a separator. If the Regex toggle to the text box's right is selected, the file pattern must be a regular expression pattern.  You can select previously used patterns by expanding the dropdown panel for the input.    Exclude folders  Specifies a directory exclude pattern to filter out folders that are not to be crawled.  Multiple file patterns can be specified with  ;  used as a separator.  If the Regex toggle to the text box's right is selected, the file pattern must be a regular expression pattern.  You can select previously used patterns by expanding the dropdown panel for the input.    Include subfolders  Indicates that folders should be recursively searched.    Include hidden  The given OS's native hidden files, folders and dotfiles will be included in the search.    Include binary files  Forces Rummage to search binary files.      Tip  If you don't specify a search pattern, Rummage will use your file filter and just show files that match your file filter pattern.", 
            "title": "Limit Search Panel"
        }, 
        {
            "location": "/usage/#export-to-csv-or-html", 
            "text": "Rummage allows the exporting of the results to either CSV or HTML.  Simply select  File Export  and pick either  CSV  or  HTML .  The HTML output will be styled similar to the GUI interface with the results in tables with sortable columns.  !!! note \"Note\":\n    Really, really large sets of results will probably be best suited for CSV as a browser may have a hard time loading the entire data set at once.", 
            "title": "Export to CSV or HTML"
        }, 
        {
            "location": "/usage/#preferences", 
            "text": "The preference dialog (found at  File Preferences ) is where general application settings are available. The preference dialog organizes settings by tabs.", 
            "title": "Preferences"
        }, 
        {
            "location": "/usage/#general", 
            "text": "The  General  tab contains a couple of useful settings.   Single Instance  By default, Rummage will allow for multiple windows to be open.  If this option is enabled, the first window will be be the only window to open.  All subsequent instances will pass their arguments to the first and close without showing a window.  Language  Rummage has internal support to display dialog labels in different languages. Currently Rummage has English. Russian is outdated but includes most of the needed translations. In order to use locale, you must copy the project's localization files to your user settings directory. See  Localization  to learn more.", 
            "title": "General"
        }, 
        {
            "location": "/usage/#regex", 
            "text": "The  Regular Expression Modules  tab is where the desired regular expression engine that Rummage uses can be selected and configured.  By default, Rummage will use Re, but if Regex module is installed in your Python installation, it can be selected instead.  There is also the options of using Re or Regex with  Backrefs  (a wrapper that adds a couple of special escapes).  If using Regex, you can set it to version of your choice.  V0  tries to be completely compatible with Re patterns while  V1  breaks compatibility with Re and adds even more useful features. Please see  Regex documentation  to learn more.", 
            "title": "Regex"
        }, 
        {
            "location": "/usage/#editor", 
            "text": "The  Editor  tab is where an editor can be configured that will be used to show files for editing.  To setup, click the  Change  button.  You will be presented with a dialog. Simply provide the appropriate command to open files and click  Apply .   The editor options dialog has a file picker to select the the editor.  In macOS it may be beneficial to create a shell script or symlink that you can references as the picker won't be able to descend into an  .app  bundle as it is viewed as a file instead of a folder.  You can then add arguments.  Each argument must be added as a separate entry.  So something like  --file myfile.txt  would be counted as  two  arguments while  --file=myfile  would be counted as one.  As noted in the image above, Rummage provides 3 special variables that can be used to insert the file name, line number, or column number.     Argument Variables  Description      {$file}  Insert the file name.    {$line}  Insert the line number.    {$col}  Insert the column number.", 
            "title": "Editor"
        }, 
        {
            "location": "/usage/#notifications", 
            "text": "The  Notification  tab controls enabling/disabling and configuration of notifications.  You can enable/disable visual notifications and/or audible notification sounds.  You can also select whether to use the system's built-in notifications or Growl.   Ubuntu    Growl:  Support for Linux .  Native: OSD via  notify-send .    Note  Though Rummage should run on any Linux distro, the native dialog option was built around Ubuntu's native notifications called OSD.  Notifications will not work on other distros that do not use OSD  unless  they use Growl.  Even without Growl, other distros will probably still get the audible cue, but as each distro varies, it is difficult to be certain.  As notifications are not crucial to usage, this is minor concern.    macOS    Growl:  Support for macOS .  Native: Notification Center via  terminal-notifier . Path to  terminal-notifier  must be configured.    Note  When selecting  native  on macOS, an option to select the path to terminal notifier will be available since native dialogs rely on  terminal-notifier  to send notifications to the Notification Center. This must be configured or  native  notifications will not work.  When selecting the  terminal-notifier  path, you can select either the binary directly or the  . app  bundle (depending on how you installed  terminal-notifier ).  When selecting the  .app  bundle, Rummage will know how to access the binary inside the bundle.    Windows    Growl: [Support for Windows][growl-win].  Native: Native windows taskbar notifications.", 
            "title": "Notifications"
        }, 
        {
            "location": "/usage/#history", 
            "text": "The  History  panel is where all text box drop down history can be cleared.", 
            "title": "History"
        }, 
        {
            "location": "/usage/#backrefs-extended-regex-escapes", 
            "text": "Rummage has the option of using a special wrapper called Backrefs around Python's Re or the 3 rd  party Regex module. Backrefs was written specifically for use with Rummage and adds various additional back references that are known to some regex engines, but not to Python's Re or Regex modules.  The supported back references actually vary depending on the engine being used as one may already have similar support.  You can enable extended back references in the  Preferences  dialog under the  Regular Expressions Module  panel.  To learn more about the added back references when using Backrefs, read the official  Backrefs documentation .", 
            "title": "Backrefs (Extended Regex Escapes)"
        }, 
        {
            "location": "/usage/#backups", 
            "text": "Rummage by default does a backup of files on replace when  Create backups  is enabled in the main dialog. Backups are saved in the same location as the target file with the unique extension  rum-bak  appended to them.  When  Create backups  is enabled, files with the extension  rum-bak  are ignored in search and replace in order to avoid replacing content in your backup.  If desired, Rummage can be configured to store backups in a sub-folder at the target file's location by setting the  Backup to folder  option in the setting dialog. The backup folder will be named  .rum-bak .  When this is done, all files in  .rum-bak  will have the  bak  extension. The entire folder  .rum-bak  is excluded from search and replace when  Create backups  is enabled.  If you would like, you can control the backup extension in the settings dialog and/or the backup folder name.  Remember though, when saving backups to a sub-folder, the custom extension will not be applied and  bak  will be used as the whole folder is ignored eliminating the need for a unique extension.", 
            "title": "Backups"
        }, 
        {
            "location": "/usage/#file-manager-context-menu", 
            "text": "", 
            "title": "File Manager Context Menu"
        }, 
        {
            "location": "/usage/#macos", 
            "text": "Open Automator.  Create new Service.   Set the following:   Service receives selected  files or folders  in  any Application .  Shell:  /bin/sh .  Pass input:  as arguments .   Content of script:  (/Library/Frameworks/Python.framework/Versions/2.7/bin/rummage --path  $1 ) /dev/null 2 1    This is just an example. You will need to determine the location of your Python install.      Save to  /Users/ username /Library/Services/Rummage Here... .", 
            "title": "macOS"
        }, 
        {
            "location": "/usage/#windows", 
            "text": "Create a file  rummage.reg  and put the following in it (replace  rummage_path  path with the actual path to    rummage.exe  that is created in your Python Script folder on installation).  Remember to escape backslashes appropriately.  This isn't a guide in how to do registry editing proper, so only edit the registry if you are certain of what you are doing.  Windows Registry Editor Version 5.00  [HKEY_CLASSES_ROOT\\Folder\\shell\\Rummage Here...]  @ =  [HKEY_CLASSES_ROOT\\Folder\\shell\\Rummage Here...\\command]  @ = \\ rummage_path \\  \\ --path\\  \\ %1\\  [HKEY_CLASSES_ROOT\\*\\shell\\Rummage Here...]  @ =  [HKEY_CLASSES_ROOT\\*\\shell\\Rummage Here...\\command]  @ = \\ rummage_path \\  \\ --path\\  \\ %1\\     Save file.   Double click the registry file to add the context menu into Windows Explorer.", 
            "title": "Windows"
        }, 
        {
            "location": "/usage/#linux", 
            "text": "There are many different flavors of Linux using different file managers.  This makes it difficult to give a guide to cover all cases.  Please research about your specific distro's file manager and how to add context menus.  If you would like to include the info here, please issue a pull request to update the documentation.", 
            "title": "Linux"
        }, 
        {
            "location": "/usage/#ubuntu-nautilus", 
            "text": "Paths might vary depending on Ubuntu version etc.    Create an executable file called  Rummage Here...  in  ~/.local/share/nautilus/scripts/  with the following content (RUMMAGE_PATH should be the binary created when installing rummage in Python which is usually  /usr/local/bin/rummage ).  #!/usr/bin/python  import   os  import   subprocess  RUMMAGE_PATH   =   /usr/local/bin/rummage  selected_paths   =   os . environ . get ( NAUTILUS_SCRIPT_SELECTED_FILE_PATHS ,   None )  if   selected_paths   is   not   None : \n     paths   =   selected_paths . split ( \\n ) \n     if   len ( paths ): \n         subprocess . Popen ([ RUMMAGE_PATH ,   --path ,   paths [ 0 ]])     Restart of Nautilus may or may not be needed, but context menu item should appear under  Scripts  and should work on files and folders.", 
            "title": "Ubuntu Nautilus"
        }, 
        {
            "location": "/usage/#localization", 
            "text": "Rummage provides an i18n localization framework to allow support for displaying the UI in other languages. But there is some manual setup required as out of the box, everything is in English. Currently the project only has an incomplete Russian translation (I don't speak Russian, so I can't complete it).  So to get localization, you must first build the  .mo  files on your system, copy them to your Rummage setting folder, select your desired language in the preference dialog, and restart Rummage.", 
            "title": "Localization"
        }, 
        {
            "location": "/usage/#build-translations", 
            "text": "Download the release source and unzip it.  Compile  .mo  files by running the  tools/localize_me.py  script from the root of the project:  python3 tools/localize_me.py --i18n /Library/Frameworks/Python.framework/Versions/3.6/share/doc/python3.6/examples/Tools/i18n  Modify the  --i18n  path to the appropriate location of the  i18n  folder for your Python.", 
            "title": "Build Translations"
        }, 
        {
            "location": "/usage/#installing-translations", 
            "text": "To install translations, just copy the  locale  folder (with your compiled  .mo  files) from the release you are using to your user configuration folder.  For a traditional Python installation, this is where you'd find it for each OS:  Windows:  C:\\Users\\ my_username \\.Rummage \nmacOS:  /Users/ my_username /.Rummage \nLinux:  /home/ my_username /.config/Rummage  Unless the UI changes by adding new untranslated strings, you can keep using the same translations.  After installing the localization files, set the language via the  Language  setting in the settings  General panel .", 
            "title": "Installing Translations"
        }, 
        {
            "location": "/usage/#adding-new-translations", 
            "text": "Clone the project and create a new folder under  locale  with the appropriate locale name.  Create another folder under the one you just created called  LC_MESSAGES .  Copy  locale/messages.po  to  locale/ my_LOCALE /LC_MESSAGES/rummage.po .   Edit the copied file changing things like:  msgid  About \nmsgstr    To:  msgid  About \nmsgstr  my_translation     Compile by following steps in  Build Translations .    Commit, push, and pull request.    I only speak English, so I do not maintain the translations. If the UI changes, someone from the community will need to update them appropriately via pull requests or they will remain out of date.", 
            "title": "Adding New Translations"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing \n Support\n\ue157\n\n\nOverview\n\ue157\n\n\nContribution from the community is encouraged and can be done in a variety of ways:\n\n\n\n\nBug reports.\n\n\nReviewing code.\n\n\nCode patches via pull requests.\n\n\nDocumentation improvements via pull requests.\n\n\n\n\nBug Reports\n\ue157\n\n\n\n\n\n\nPlease \nread the documentation\n and \nsearch the issue tracker\n to try to find the answer to your question \nbefore\n posting an issue.\n\n\n\n\n\n\nWhen creating an issue on the repository, please provide as much info as possible:\n\n\n\n\nVersion being used.\n\n\nOperating system.\n\n\nErrors in console.\n\n\nDetailed description of the problem.\n\n\nExamples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.\n\n\n\n\nThe more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.\n\n\n\n\n\n\nBe prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.\n\n\n\n\n\n\nReviewing Code\n\ue157\n\n\nTake part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weaknesses in the algorithm.\n\n\nPull Requests\n\ue157\n\n\nPull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.\n\n\nContinuous integration tests are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting. You should also add tests for bugs you are fixing. If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.\n\n\nRunning Validation Tests\n\ue157\n\n\n\n\n\n\nMake sure that Tox is installed:\n\n\npip install tox\n\n\n\n\n\n\n\n\nRun Tox:\n\n\ntox\n\n\n\n\nTox should install necessary dependencies and run the tests. If you are a Linux user, please check out information on \nrequirements\n.\n\n\n\n\n\n\nDocumentation Improvements\n\ue157\n\n\nA ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn't be any need to run validation tests if only updating documentation.\n\n\nYou don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of \nMkDocs\n, the \nMaterial theme\n, and \nPyMdown Extensions\n to render the docs.  You can preview the docs if you install these packages.  The command for previewing the docs is \nmkdocs serve\n. It should be run from the root directory. You can then view the documents at \nlocalhost:8000\n.", 
            "title": "Contributing &amp; Support"
        }, 
        {
            "location": "/contributing/#contributing--support", 
            "text": "", 
            "title": "Contributing &amp; Support"
        }, 
        {
            "location": "/contributing/#overview", 
            "text": "Contribution from the community is encouraged and can be done in a variety of ways:   Bug reports.  Reviewing code.  Code patches via pull requests.  Documentation improvements via pull requests.", 
            "title": "Overview"
        }, 
        {
            "location": "/contributing/#bug-reports", 
            "text": "Please  read the documentation  and  search the issue tracker  to try to find the answer to your question  before  posting an issue.    When creating an issue on the repository, please provide as much info as possible:   Version being used.  Operating system.  Errors in console.  Detailed description of the problem.  Examples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.   The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.    Be prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.", 
            "title": "Bug Reports"
        }, 
        {
            "location": "/contributing/#reviewing-code", 
            "text": "Take part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weaknesses in the algorithm.", 
            "title": "Reviewing Code"
        }, 
        {
            "location": "/contributing/#pull-requests", 
            "text": "Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.  Continuous integration tests are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting. You should also add tests for bugs you are fixing. If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.", 
            "title": "Pull Requests"
        }, 
        {
            "location": "/contributing/#running-validation-tests", 
            "text": "Make sure that Tox is installed:  pip install tox    Run Tox:  tox  Tox should install necessary dependencies and run the tests. If you are a Linux user, please check out information on  requirements .", 
            "title": "Running Validation Tests"
        }, 
        {
            "location": "/contributing/#documentation-improvements", 
            "text": "A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn't be any need to run validation tests if only updating documentation.  You don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of  MkDocs , the  Material theme , and  PyMdown Extensions  to render the docs.  You can preview the docs if you install these packages.  The command for previewing the docs is  mkdocs serve . It should be run from the root directory. You can then view the documents at  localhost:8000 .", 
            "title": "Documentation Improvements"
        }, 
        {
            "location": "/changelog/", 
            "text": "Changelog\n\ue157\n\n\n2.3.2\n\ue157\n\n\nAug 18, 2017\n\n\n\n\nFIX\n: Fix Windows \npythonw\n failure.\n\n\n\n\n2.3.1\n\ue157\n\n\nJul 26, 2017\n\n\n\n\nFIX\n: \nwxPython\n 4.0.0b1 removed label parameter from constructor.\n\n\nFIX\n: Debug Unicode issue.\n\n\n\n\n2.3.0\n\ue157\n\n\nJul 17, 2017\n\n\n\n\nNEW\n: Add reveal right click menu option in \"File\" tab results.\n\n\nNEW\n: Expose backup configuration and allow putting all backups in a folder if desired.\n\n\nFIX\n: Windows Unicode input path issues from command line and through the pipe during single instance argument transfer.\n\n\nFIX\n: Windows Unicode issue when calling a shell command to open file in editor.\n\n\n\n\n2.2.0\n\ue157\n\n\nJul 14, 2017\n\n\n\n\nNEW\n: Redesign of the preferences dialog.\n\n\nNEW\n: Editor configurations are now sent through the shell which changes and simplifies the interface to set it up.\n\n\nFIX\n: Simplify dialog initial resize.\n\n\nFIX\n: Clean up of closing events: ensure we return a code, destroy objects, and skip unnecessary actions.\n\n\nFIX\n: Use double buffering on certain windows and panels in Windows to reduce text flickering on resize.\n\n\nFIX\n: Window is only resized by force on initial load, and if the dialog is ever too small when showing something that was hidden.\n\n\nFIX\n: Revert ensuring window is never bigger than usable size for now.\n\n\n\n\n2.1.0\n\ue157\n\n\nJul 9, 2017\n\n\n\n\nNEW\n: Add new chained search feature.\n\n\nNEW\n: Add new replace plugin support.\n\n\nNEW\n: Restructure internal API to support chained search.\n\n\nNEW\n: Saved searches will now require a unique name and an optional comment. Old legacy saves will be converted on first access. The old legacy name will be the comment, and a unique name will be generated from the comment.\n\n\nNEW\n: Saved search names and comments can be edited from the \"Load Search\" panel.\n\n\nNEW\n: Internal API no longer will guess and decode strings, only files.  It is expected that the caller handles encoding of string buffers.  A Unicode buffer will be searched as usual, and a binary string buffer will be treated as binary.\n\n\nNEW\n: Tester dialog will now process literal searches as well.\n\n\nNEW\n: Literal searches will now utilize the Unicode related flags. This is particularly notable if using the Regex module and wanting to have full case-folding applied in case-insensitive matches.\n\n\nFIX\n: Visual inconsistencies in regard to text box size relative to siblings, alignment of labels, etc.\n\n\nFIX\n: Content text box in tester dialog will now allow entering tab characters on all platforms instead of navigating to next control.\n\n\nFIX\n: Fix wxPython deprecation noise in the console.\n\n\nFIX\n: Fix some binary related replace issues.\n\n\nFIX\n: Fix search not aborting.\n\n\nFIX\n: Fix issue where selecting file from drop down list didn't hide limit panel.\n\n\nFIX\n: Don't display replace message when aborting replace.\n\n\nFIX\n: Fix limit panel hide logic so it doesn't show a the hidden panel on search.\n\n\nFIX\n: POSIX flag not generating refresh in tester dialog.\n\n\nFIX\n: Unicode issue in preferences' editor dialog.\n\n\nFIX\n: Ensure all localized strings properly get loaded.\n\n\nFIX\n: Ensure initial \non_loaded\n event via \nCallLater\n works properly in Python 2 and 3.\n\n\nFIX\n: Call initial main window resize in \non_loaded\n event in some situations.\n\n\nFIX\n: Ensure main window initial resize is never bigger than usable screen size.\n\n\n\n\n2.0.5\n\ue157\n\n\nJul 2, 2017\n\n\n\n\nFIX\n: Issue where mousing over results showed nothing in status bar.\n\n\nFIX\n: Issue where double clicking result in Content pattern would not open in editor.\n\n\n\n\n2.0.4\n\ue157\n\n\nJun 30, 2017\n\n\n\n\nFIX\n: Bump rev.\n\n\n\n\n2.0.3\n\ue157\n\n\nJun 30, 2017\n\n\n\n\nFIX\n: Fix editor argument dialog.\n\n\n\n\n2.0.2\n\ue157\n\n\nJun 27, 2017\n\n\n\n\nFIX\n: Revert changes in 2.0.1 as wheels don't run setup and don't properly create the Python specific commands.\n\n\n\n\n2.0.1\n\ue157\n\n\nJun 27, 2017\n\n\n\n\nFIX\n: Release binary in path as \nrummage\n and \nrummage\nversion\n. So for 2.7, it would be \nrummage2.7\n.\n\n\n\n\n2.0.0\n\ue157\n\n\nJun 27, 2017\n\n\n\n\nNEW\n: Python 3 support via the new wxPython 4.0.0 Phoenix!\n\n\nNEW\n: Dropped classic wxPython (\n4.0.0) as it is too much work to maintain legacy support as well.\n\n\nNEW\n: Serialize piped argument data.\n\n\nFIX\n: Icon now displays in Ubuntu.\n\n\nFIX\n: Fix tab traversal issues in both macOS and Linux.\n\n\nFIX\n: Fix Linux progress bar disappearing.\n\n\nFIX\n: Fix notifications with terminal-notifier.\n\n\nFIX\n: Fix issues related to localization.\n\n\n\n\n1.0.2\n\ue157\n\n\nJul 16, 2016\n\n\n\n\nFIX\n: issue where editor could not be set.\n\n\n\n\n1.0.1\n\ue157\n\n\nJun 22, 2016\n\n\n\n\nFIX\n: Fixed issue where literal replace was not actually literal replace.\n\n\n\n\n1.0.0\n\ue157\n\n\nMay 3, 2016\n\n\n\n\nNEW\n: Initial release", 
            "title": "Changelog"
        }, 
        {
            "location": "/changelog/#changelog", 
            "text": "", 
            "title": "Changelog"
        }, 
        {
            "location": "/changelog/#232", 
            "text": "Aug 18, 2017   FIX : Fix Windows  pythonw  failure.", 
            "title": "2.3.2"
        }, 
        {
            "location": "/changelog/#231", 
            "text": "Jul 26, 2017   FIX :  wxPython  4.0.0b1 removed label parameter from constructor.  FIX : Debug Unicode issue.", 
            "title": "2.3.1"
        }, 
        {
            "location": "/changelog/#230", 
            "text": "Jul 17, 2017   NEW : Add reveal right click menu option in \"File\" tab results.  NEW : Expose backup configuration and allow putting all backups in a folder if desired.  FIX : Windows Unicode input path issues from command line and through the pipe during single instance argument transfer.  FIX : Windows Unicode issue when calling a shell command to open file in editor.", 
            "title": "2.3.0"
        }, 
        {
            "location": "/changelog/#220", 
            "text": "Jul 14, 2017   NEW : Redesign of the preferences dialog.  NEW : Editor configurations are now sent through the shell which changes and simplifies the interface to set it up.  FIX : Simplify dialog initial resize.  FIX : Clean up of closing events: ensure we return a code, destroy objects, and skip unnecessary actions.  FIX : Use double buffering on certain windows and panels in Windows to reduce text flickering on resize.  FIX : Window is only resized by force on initial load, and if the dialog is ever too small when showing something that was hidden.  FIX : Revert ensuring window is never bigger than usable size for now.", 
            "title": "2.2.0"
        }, 
        {
            "location": "/changelog/#210", 
            "text": "Jul 9, 2017   NEW : Add new chained search feature.  NEW : Add new replace plugin support.  NEW : Restructure internal API to support chained search.  NEW : Saved searches will now require a unique name and an optional comment. Old legacy saves will be converted on first access. The old legacy name will be the comment, and a unique name will be generated from the comment.  NEW : Saved search names and comments can be edited from the \"Load Search\" panel.  NEW : Internal API no longer will guess and decode strings, only files.  It is expected that the caller handles encoding of string buffers.  A Unicode buffer will be searched as usual, and a binary string buffer will be treated as binary.  NEW : Tester dialog will now process literal searches as well.  NEW : Literal searches will now utilize the Unicode related flags. This is particularly notable if using the Regex module and wanting to have full case-folding applied in case-insensitive matches.  FIX : Visual inconsistencies in regard to text box size relative to siblings, alignment of labels, etc.  FIX : Content text box in tester dialog will now allow entering tab characters on all platforms instead of navigating to next control.  FIX : Fix wxPython deprecation noise in the console.  FIX : Fix some binary related replace issues.  FIX : Fix search not aborting.  FIX : Fix issue where selecting file from drop down list didn't hide limit panel.  FIX : Don't display replace message when aborting replace.  FIX : Fix limit panel hide logic so it doesn't show a the hidden panel on search.  FIX : POSIX flag not generating refresh in tester dialog.  FIX : Unicode issue in preferences' editor dialog.  FIX : Ensure all localized strings properly get loaded.  FIX : Ensure initial  on_loaded  event via  CallLater  works properly in Python 2 and 3.  FIX : Call initial main window resize in  on_loaded  event in some situations.  FIX : Ensure main window initial resize is never bigger than usable screen size.", 
            "title": "2.1.0"
        }, 
        {
            "location": "/changelog/#205", 
            "text": "Jul 2, 2017   FIX : Issue where mousing over results showed nothing in status bar.  FIX : Issue where double clicking result in Content pattern would not open in editor.", 
            "title": "2.0.5"
        }, 
        {
            "location": "/changelog/#204", 
            "text": "Jun 30, 2017   FIX : Bump rev.", 
            "title": "2.0.4"
        }, 
        {
            "location": "/changelog/#203", 
            "text": "Jun 30, 2017   FIX : Fix editor argument dialog.", 
            "title": "2.0.3"
        }, 
        {
            "location": "/changelog/#202", 
            "text": "Jun 27, 2017   FIX : Revert changes in 2.0.1 as wheels don't run setup and don't properly create the Python specific commands.", 
            "title": "2.0.2"
        }, 
        {
            "location": "/changelog/#201", 
            "text": "Jun 27, 2017   FIX : Release binary in path as  rummage  and  rummage version . So for 2.7, it would be  rummage2.7 .", 
            "title": "2.0.1"
        }, 
        {
            "location": "/changelog/#200", 
            "text": "Jun 27, 2017   NEW : Python 3 support via the new wxPython 4.0.0 Phoenix!  NEW : Dropped classic wxPython ( 4.0.0) as it is too much work to maintain legacy support as well.  NEW : Serialize piped argument data.  FIX : Icon now displays in Ubuntu.  FIX : Fix tab traversal issues in both macOS and Linux.  FIX : Fix Linux progress bar disappearing.  FIX : Fix notifications with terminal-notifier.  FIX : Fix issues related to localization.", 
            "title": "2.0.0"
        }, 
        {
            "location": "/changelog/#102", 
            "text": "Jul 16, 2016   FIX : issue where editor could not be set.", 
            "title": "1.0.2"
        }, 
        {
            "location": "/changelog/#101", 
            "text": "Jun 22, 2016   FIX : Fixed issue where literal replace was not actually literal replace.", 
            "title": "1.0.1"
        }, 
        {
            "location": "/changelog/#100", 
            "text": "May 3, 2016   NEW : Initial release", 
            "title": "1.0.0"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\ue157\n\n\nMIT license.\n\n\nCopyright \n 2013 - 2017 Isaac Muse \n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "MIT license.  Copyright   2013 - 2017 Isaac Muse   Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }
    ]
}